unit cProVenda;

interface


uses System.Classes, Vcl.Controls, Vcl.ExtCtrls, Vcl.Dialogs,cControleEstoque,
      ZAbstractConnection, ZConnection,ZAbstractRODataset, uEnum,
      ZAbstractDataset, ZDataset,System.SysUtils, Data.DB, Datasnap.DBClient;


type
  TVenda = class
  private
    ConexaoDB:TZConnection;
    F_vendaId: Integer;
    F_clienteId: Integer;
    F_dataVenda: TDateTime;
    F_totalVenda: Double;
    function InserirItens(cds: TClientDataSet; IdVenda: Integer): Boolean;
    function ApagarItens(cds: TClientdataSet): Boolean;
    function InNot(cds: TClientDataSet): string;
    function EsteItemExiste(vendaId, produtoId: Integer): Boolean;
    function AtualizarItem(cds: TClientDataSet): Boolean;
    procedure retornarEstoque(sCodigo: string; Acao: TAcaoExcluirEstoque);
    procedure BaixaEstoque(produtoId: Integer; Quantidade: Double);

  public
    constructor Create(aConexao: TZConnection);
    destructor Destroy; override;
    function Inserir(cds:TClientDataSet):Boolean;
    function Atualizar(cds:TClientDataSet):Boolean;
    function Apagar:Boolean;
    function Selecionar(id:Integer; var cds:TClientDataSet): Boolean;
  published
    property VendaId: Integer      read F_vendaId     write F_vendaId;
    property ClienteId: Integer    read F_clienteId   write F_clienteId;
    property DataVenda: TDateTime  read F_dataVenda   write F_dataVenda;
    property TotalVenda:Double     read F_totalVenda  write F_totalVenda;
  end;

implementation

{$REGION 'Constructor an Destructor'}
constructor TVenda.Create(aConexao:TZConnection);
begin
  ConexaoDB:=aConexao;
end;

destructor TVenda.Destroy;
begin

  inherited;
end;
{$endRegion}

{$REGION 'CRUD'}
function TVenda.Apagar: Boolean;
var Qry: TZQuery;
begin


  if MessageDlg('Apagar o registro: ' +#13+#13+
                'Venda N°: '+ IntToStr(Self.F_vendaId)
                ,mtConfirmation,[mbYes,mbNo],0)=mrNo then begin
     Result:=False;
     Abort;
  end;


  try
    result:=True;
    conexaoDB.StartTransaction;
    Qry:= TZQuery.Create(nil);
    Qry.Connection:= ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('DELETE FROM vendasItens WHERE vendaId = :vendaId ');
    Qry.ParamByName('vendaId').AsInteger := Self.F_vendaId;
    try
      Qry.ExecSQL;
      //Apaga a tabela Master
      Qry.SQL.Clear;
      Qry.SQL.Add('DELETE FROM vendas WHERE vendaId = :vendaId');
      Qry.ParamByName('vendaId').AsInteger := Self.F_vendaId;
      Qry.ExecSQL;
      conexaoDB.Commit;
    except
    on E:Exception do
      begin
      ConexaoDB.Rollback;
      Result:=False;
      MessageDlg('Ocorreu uma falha na Gravação: '+E.Message,mtError,[mbOK],0);
      end;
    end;
  finally
    if Assigned(Qry) then
      FreeAndNil(Qry);
  end;
end;


function TVenda.Atualizar(cds:TClientDataSet): Boolean;
var Qry:TZQuery;
begin
  try
    result:= True;
    ConexaoDB.StartTransaction;
    Qry:= TZQuery.Create(nil);
    Qry.Connection:= ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('UPDATE vendas SET clienteId= :clienteId, dataVenda= :dataVenda,' +
                ' totalVenda= :totalVenda WHERE vendaId= :vendaId');
    Qry.ParamByName('vendaId').AsInteger    := Self.F_vendaId;
    Qry.ParamByName('clienteId').AsInteger  := Self.F_clienteId;
    Qry.ParamByName('dataVenda').AsDateTime := Self.F_dataVenda;
    Qry.ParamByName('totalVenda').AsFloat   := Self.F_totalVenda;

    try
      //Update Vendas
      Qry.ExecSQL;

      //Apagar itens apagados do cds do banco de dados
      ApagarItens(cds);

      cds.First;
      while not cds.Eof do begin
        if EsteItemExiste(Self.F_vendaId, cds.FieldByName('produtoId').AsInteger) then begin
           AtualizarItem(cds)
        end
        else begin
           InserirItens(cds, Self.F_vendaId);
        end;
        cds.Next;
      end;
    except
    on E:Exception do
      begin
        result:= False;
        ConexaoDB.Rollback;
        MessageDlg('Ocorreu uma falha na Gravação: '+E.Message,mtError,[mbOK],0);
      end;
    end;
    ConexaoDB.Commit;
  finally
    if Assigned(Qry) then
      FreeAndNil(Qry);
  end;
end;

function TVenda.AtualizarItem(cds:TClientDataSet):Boolean;
var Qry:TZQuery;
begin
  try
    result:=True;
    Qry:=TZQuery.Create(nil);
    retornarEstoque(cds.FieldByName('produtoId').AsString, aeeAlterar);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('UPDATE vendasItens '+
                'SET valorUnitario              =:valorUnitario' +
                '   ,quantidade          =:quantidade' +
                '   ,totalProduto            =:totalProduto' +
                ' WHERE vendaId=:vendaId  AND  produtoId=:produtoId');

  Qry.ParamByName('vendaId').AsInteger         := Self.F_vendaId;
  Qry.ParamByName('produtoId').AsInteger       := cds.FieldByName('produtoId').AsInteger;
  Qry.ParamByName('valorUnitario').AsFloat     := cds.FieldByName('valorUnitario').AsFloat;
  Qry.ParamByName('quantidade').AsFloat        := cds.FieldByName('quantidade').AsFloat;
  Qry.ParamByName('totalProduto').AsFloat      := cds.FieldByName('valorTotalProduto').AsFloat;

  try
    Qry.ExecSQL;
    BaixaEstoque(cds.FieldByName('produtoId').AsInteger, cds.FieldByName('quantidaade').AsFloat);
  except
    on E: Exception do
      begin
        result:=False;
        ShowMessage('Ocorreu um Erro: '+ E.Message);
      end;
  end;
  finally
    if Assigned(Qry) then
      FreeAndNil(Qry);
  end;
end;




function TVenda.EsteItemExiste(vendaId: Integer; produtoId: Integer): Boolean;
var Qry:TZQuery;
begin
  try
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('SELECT Count(vendaId) AS Qtde FROM vendasItens' +
                ' WHERE vendaId= :vendaId AND produtoId=:produtoId ' );
    Qry.ParamByName('vendaId').AsInteger  :=vendaId;
    Qry.ParamByName('produtoId').AsInteger := produtoId;
    try
      Qry.Open;

      if Qry.FieldByName('Qtde').AsInteger>0 then
        Result:=True
      else
        result:= False;

    except
    on E:Exception do begin
    result:=False;
    MessageDlg('Ocorreu uma falha na Gravação: '+E.Message,mtError,[mbOK],0);
    end;
    end;
  finally
    if Assigned(Qry) then
      FreeAndNil(Qry);
  end;
end;



function TVenda.ApagarItens(cds:TClientdataSet): Boolean;
var Qry:TZQuery;
begin
  try
    result:=True;
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('DELETE FROM vendasItens '+
                ' WHERE vendaId= :vendaId AND produtoId NOT IN ('+InNot(cds)+') ');
    Qry.ParamByName('vendaId').AsInteger :=Self.F_vendaId;
    try
      Qry.ExecSQL;
    except
      on E: Exception do
        begin
        result:=False;
        MessageDlg('Ocorreu um Erro:'+E.Message,mtError,[mbOK],0);
        end;
    end;
  finally
    if Assigned(Qry) then
      FreeAndNil(Qry);
  end;
end;

function TVenda.InNot(cds:TClientDataSet):string;
var sInNot:string;
begin
  sInNot:=EmptyStr;
  cds.First;
  while not cds.Eof do
  begin
    if sInNot = EmptyStr then
          sInNot := cds.fieldbyname('produtoId').AsString
    else
          sInNot := sInNot + ','+cds.fieldbyname('produtoId').AsString;

    cds.Next;
  end;
  result:=sInNot;
end;



function TVenda.Inserir(cds:TClientDataSet): Boolean;
var Qry: TZQuery;
    IdVendaGerado:Integer;
begin
  try
    Result:= True;
    conexaoDB.StartTransaction;
    Qry:= TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('INSERT INTO vendas (clienteId, dataVenda, totalVenda) '+
                '             VALUES (:clienteId, :dataVenda, :totalVenda )' );
    Qry.SQL.Add('SELECT SCOPE_IDENTITY() AS ID');
    Qry.ParamByName('clienteId').AsInteger   := Self.F_clienteId;
    Qry.ParamByName('dataVenda').AsDateTime  := Self.F_dataVenda;
    Qry.ParamByName('totalVenda').AsFloat    := Self.F_totalVenda;

    try
      //Recupera o ID gerado no Insert
      Qry.Open;

      //Id da tabela Master (Venda)
      IdVendaGerado:=Qry.FieldByName('ID').AsInteger;

      cds.First;
      while not cds.Eof do begin
        InserirItens(cds, IdVendaGerado);
        cds.Next;
      end;

      ConexaoDB.Commit;
    except
      on E:Exception do
      begin
        ConexaoDB.Rollback;
        result:= False;
        MessageDlg('Ocorreu uma falha na Gravação: '+E.Message,mtError,[mbOK],0);
      end;
    end;


  finally
    if Assigned(Qry) then
      FreeAndNil(Qry);
  end;
end;


function TVenda.InserirItens(cds:TClientDataSet; IdVenda:Integer):Boolean;
var Qry:TZQuery;
begin
  try
    result:=True;
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('INSERT INTO vendasItens (vendaId, produtoId, valorUnitario,quantidade, totalProduto)'+
                ' VALUES   (:vendaId, :ProdutoId, :ValorUnitario,:Quantidade, :TotalProduto)');
  Qry.ParamByName('vendaId').AsInteger:=IdVenda;
  Qry.ParamByName('ProdutoId').AsInteger:=cds.FieldByName('produtoId').AsInteger;
  Qry.ParamByName('ValorUnitario').AsFloat:=cds.FieldByName('valorUnitario').AsFloat;
  Qry.ParamByName('Quantidade').AsFloat:=cds.FieldByName('quantidade').AsFloat;
  Qry.ParamByName('TotalProduto').AsFloat:=cds.FieldByName('valorTotalProduto').AsFloat;

  try
    Qry.ExecSQL;
    BaixaEstoque(cds.FieldByName('produtoId').AsInteger , cds.FieldByName('quantidade').AsFloat);
  except
    on E: Exception do
      begin
        result:=False;
        ShowMessage('Ocorreu um Erro: '+ E.Message);
      end;
  end;
  finally
    if Assigned(Qry) then
      FreeAndNil(Qry);
  end;
end;


function TVenda.Selecionar(id: Integer; var cds:TClientDataSet): Boolean;
var Qry:TZQuery;
begin
  try
    result:=True;
    Qry:= TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('SELECT vendaId, clienteId, dataVenda, totalVenda ' +
                ' FROM vendas ' +
                ' WHERE vendaId=:vendaId');
    Qry.ParamByName('vendaId').AsInteger:= id;
    try
      Qry.Open;

      Self.F_vendaId     := Qry.FieldByName('vendaId').AsInteger;
      Self.F_clienteId   := Qry.FieldByName('clienteId').AsInteger;
      Self.F_dataVenda   := Qry.FieldByName('dataVenda').AsDateTime;
      Self.F_totalVenda  := Qry.FieldByName('totalVenda').AsFloat;

     {$REGION 'Selecionar na tabela VendasItens'}
      cds.First;
      while not cds.Eof do begin
        cds.Delete;
      end;

      Qry.Close;
      Qry.SQL.Clear;
      //Seleciona os valores do banco para jogar no client dataset
      Qry.SQL.Add(' SELECT vendasItens.produtoId, produtos.nome, vendasItens.valorUnitario, ' +
                  ' vendasItens.quantidade, vendasItens.totalProduto ' +
                  ' FROM vendasItens INNER JOIN produtos On produtos.produtoId = vendasItens.produtoId ' +
                  ' WHERE vendasItens.vendaId=:vendaId');
      Qry.ParamByName('vendaId').AsInteger  := Self.F_vendaId;
      Qry.Open;

      //Pega da qry e joga no client dataset
      Qry.First;
      while not Qry.Eof do begin
        cds.Append;
        cds.FieldByName('produtoId').AsInteger        := Qry.FieldByName('produtoId').AsInteger;
        cds.FieldByName('nomeProduto').AsString       := Qry.FieldByName('nome').AsString;
        cds.FieldByName('valorUnitario').AsFloat      := Qry.FieldByName('valorUnitario').AsFloat;
        cds.FieldByName('quantidade').AsFloat         := Qry.FieldByName('quantidade').AsFloat;
        cds.FieldByName('valorTotalProduto').AsFloat  := Qry.FieldByName('totalProduto').AsFloat;
        cds.Post;
        Qry.Next;
      end;
      cds.First;
      {$ENDREGION}

    except
      on E: Exception do
        begin
        result:= False;
        MessageDlg('Ocorreu um Erro:'+E.Message,mtError,[mbOK],0);
        end;
    end;

  finally
    if Assigned(Qry) then
      FreeAndNil(Qry);
  end;
end;



{$ENDREGION}


{$REGION 'Controle de estoque'}
//Utilizar no Update e no delete
procedure TVenda.retornarEstoque(sCodigo:string; Acao:TAcaoExcluirEstoque);
var Qry:TZQuery;
    oControleEstoque:TControleEstoque;
begin
    Qry:= TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add(' SELECT produtoId, quantidade FROM VendasItens' +
                ' WHERE VendaId=:vendaId ');
    if Acao=aeeApagar then
      Qry.SQL.Add( ' AND produtoId Not IN ('+sCodigo+')')
    else
      Qry.SQL.Add( ' AND produtoId = ('+sCodigo+')');

    Qry.ParamByName('vendaId').AsInteger  := Self.F_vendaId;
    try
      oControleEstoque:=TControleEstoque.Create(ConexaoDB);
      Qry.Open;
      Qry.First;
      while not Qry.Eof do begin
        oControleEstoque.produtoId  :=Qry.FieldByName('produtoId').AsInteger;
        oControleEstoque.quantidade :=Qry.FieldByName('quantidade').AsFloat;
        oControleEstoque.RetornarEstoque;
        Qry.Next;
      end;
    finally
      if Assigned(oControleEstoque) then
          FreeAndNil(oControleEstoque);
    end;
end;

procedure TVenda.BaixaEstoque(produtoId:Integer; Quantidade:Double);
var oControleEstoque: TControleEstoque;
begin
   try
     oControleEstoque:= TControleEstoque.Create(ConexaoDB);
     oControleEstoque.produtoId   := produtoId;
     oControleEstoque.quantidade  := Quantidade;
     oControleEstoque.BaixarEstoque;
   finally
     if Assigned(oControleEstoque) then
        FreeAndNil(oControleEstoque);
   end;
end;



{$ENDREGION}

end.
