unit cCadUsuario;

interface

uses System.Classes, Vcl.Controls, Vcl.ExtCtrls, Vcl.Dialogs, ZAbstractConnection, ZConnection,
     ZAbstractRODataset,ZAbstractDataset,ZDataset, System.SysUtils, uFuncaoCriptografia;


type
   TUsuario = class
   private
      ConexaoDB:TZConnection;
      F_usuarioId: Integer;
      F_nome:string;
      F_senha: string;
    function getSenha: string;
    procedure setSenha(const Value: string);
      public
        constructor Create(aConexao:TZConnection);
        destructor Destroy; override;
        function Inserir:Boolean;
        function Atualizar: Boolean;
        function Apagar:Boolean;
        function Selecionar(id:Integer): Boolean;
        function Logar(aUsuario, aSenha: string): Boolean;
        function UsuarioExiste(aUsuario: string): Boolean;
      published
        property codigo   :Integer  read F_usuarioId  write F_usuarioId;
        property nome     :string   read F_nome       write F_nome;
        property senha    :string   read getSenha     write setSenha;
   end;
implementation

{ TUsuario }
{$REGION 'Constructor and destructor'}
constructor TUsuario.Create(aConexao: TZConnection);
begin
   ConexaoDB:=aConexao;
end;

destructor TUsuario.Destroy;
begin

  inherited;
end;

 {$endregion}


function TUsuario.Apagar: Boolean;
var Qry:TZQuery;
begin
  if MessageDlg('Apagar o registro: ' +#13+#13+
                'Código: '+ IntToStr(F_usuarioId)+#13+
                'Nome: '+ F_nome,mtConfirmation,[mbYes,mbNo],0)=mrNo then begin
     Result:=False;
     Abort;
  end;

  try
    result:=True;
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('DELETE FROM usuarios '+
                ' WHERE usuarioId= :usuarioId ');
    Qry.ParamByName('usuarioId').AsInteger := F_usuarioId;
    try
      Qry.ExecSQL;
    except
      on E: Exception do
        begin
        result:=False;
        MessageDlg('Ocorreu um Erro na Exclusão:'+E.Message,mtError,[mbOK],0);
        end;
    end;
  finally
    if Assigned(Qry) then
      FreeAndNil(Qry);
  end;
end;

function TUsuario.Atualizar: Boolean;
var Qry:TZQuery;
begin
  try
    result:=True;
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('UPDATE usuarios '+
                'SET nome              =:nome' +
                '   ,senha          =:senha' +
                ' WHERE usuarioId=:usuarioId');

  Qry.ParamByName('usuarioId').AsInteger        := Self.F_usuarioId;
  Qry.ParamByName('nome').AsString              := Self.F_nome;
  Qry.ParamByName('senha').AsString             := Self.F_senha;

  try
    Qry.ExecSQL;
  except
    on E: Exception do
      begin
        result:=False;
        ShowMessage('Ocorreu um Erro: '+ E.Message);
      end;
  end;
  finally
    if Assigned(Qry) then
      FreeAndNil(Qry);
  end;
end;

function TUsuario.Inserir: Boolean;
var Qry:TZQuery;
begin
  try
    result:=True;
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('INSERT INTO usuarios '+
                '(nome, senha) VALUES (:nome, :senha)');

  Qry.ParamByName('nome').AsString              := Self.F_nome;
  Qry.ParamByName('senha').AsString             := Self.F_senha;

  try
    Qry.ExecSQL;
  except
    on E: Exception do
      begin
        result:=False;
        ShowMessage('Ocorreu um Erro: '+ E.Message);
      end;
  end;
  finally
    if Assigned(Qry) then
      FreeAndNil(Qry);
  end;
end;

function TUsuario.Selecionar(id: Integer): Boolean;
var Qry:TZQuery;
begin
  try
    result:=True;
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('Select usuarioId, nome, senha FROM '+
                'usuarios WHERE usuarioId= :usuarioId');

   Qry.ParamByName('usuarioId').AsInteger := id;

  try
    Qry.Open;

    Self.F_usuarioId := Qry.FieldByName('usuarioId').AsInteger;
    Self.F_senha     := Qry.FieldByName('senha').AsString;
    Self.F_nome      := Qry.FieldByName('nome').AsString;
  except
    on E: Exception do
      begin
        result:=False;
        MessageDlg('Ocorreu um Erro na Seleção: '+ E.Message,mtError,[mbOK],0);
      end;
  end;
  finally
    if Assigned(Qry) then
      FreeAndNil(Qry);
  end;
end;

function TUsuario.UsuarioExiste(aUsuario:string): Boolean;
var Qry:TZQuery;
begin
  try
    result:=True;
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('Select COUNT(usuarioId) As Qtde '+
                ' FROM usuarios WHERE nome= :nome');

   Qry.ParamByName('usuarioId').AsString := aUsuario;

  try
    Qry.Open;

    if Qry.FieldByName('Qtde').AsInteger >0 then
      Result:= True
    else
      Result:=False;
  except
    on E: Exception do
      begin
        result:=False;
        MessageDlg('Ocorreu um Erro na Seleção: '+ E.Message,mtError,[mbOK],0);
      end;
  end;
  finally
    if Assigned(Qry) then
      FreeAndNil(Qry);
  end;
end;





function TUsuario.Logar(aUsuario: string; aSenha:string):Boolean;
var Qry:TZQuery;
begin
  try
    result:=True;
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('SELECT COUNT(usuarioId) AS Qtde '+
                'FROM usuarios WHERE nome= :nome AND senha= :senha');

  Qry.ParamByName('nome').AsString              := aUsuario;
  Qry.ParamByName('senha').AsString             := Criptografar(aSenha);
  try
    Qry.Open;

    if Qry.FieldByName('Qtde').AsInteger>0 then
        result:= True
    else
        result:=False;
  except
    on E: Exception do
      begin
        result:=False;
        ShowMessage('Ocorreu um Erro: '+ E.Message);
      end;
  end;
  finally
    if Assigned(Qry) then
      FreeAndNil(Qry);
  end;
end;




procedure TUsuario.setSenha(const Value: string);
begin
   Self.F_senha := Criptografar(Value);
end;

function TUsuario.getSenha: string;
begin
  Result:= Descriptogafar(Self.F_senha);
end;

end.
