unit cAtualizacaoCamposMSSQL;

interface

uses System.Classes,
     Vcl.Controls,
     Vcl.ExtCtrls,
     Vcl.Dialogs,
     ZAbstractConnection,
     ZConnection,
     ZAbstractRODataset,
     ZAbstractDataset,
     ZDataset,
     System.SysUtils,
     cAtualizacaoBancoDeDados;

type
  TAtualizaCampoMSSQL = class(TAtualizaBancoDados)

  private
    function CampoExisteNaTabela(aNomeTabela, aCampo: string): Boolean;
    procedure Versao1;
  protected

  public
    constructor Create(aConexao:TZConnection);
    destructor Destroy; override;

  end;

implementation

{ TAtualizaCampoMSSQL }


{$region 'constructor and destructor'}
constructor TAtualizaCampoMSSQL.Create(aConexao: TZConnection);
begin
   ConexaoDB := aConexao;
   Versao1;
end;

destructor TAtualizaCampoMSSQL.Destroy;
begin

  inherited;
end;


{$endRegion}


function TAtualizaCampoMSSQL.CampoExisteNaTabela(aNomeTabela, aCampo: string): Boolean;
var Qry: TZQuery;
begin
  try
    Result:=False;
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('SELECT COUNT (COLUMN_NAME)AS Qtde ' +
                ' FROM INFORMATION_SCHEMA.COLUMNS ' +
                ' WHERE TABLE_NAME='''+aNomeTabela+''' AND COLUMN_NAME='''+aCampo+'''');
    //Qry.paramByName('Tabela').AsString := aNomeTabela;
    //Qry.ParamByName('Campo').AsString  := aCampo;
    Qry.Open;

    if Qry.FieldByName('Qtde').AsInteger>0 then
        Result:=True;

  finally
    Qry.Close;
    if Assigned(Qry) then
      FreeAndNil(Qry);
  end;
end;

procedure TAtualizaCampoMSSQL.Versao1;
begin
  if not CampoExisteNaTabela('categorias','teste') then
    begin
      ExecutaDiretoBancoDeDados('Alter table categorias ADD teste varchar (30) NULL ');
    end;

  if  CampoExisteNaTabela('categorias','teste') then
    begin
      ExecutaDiretoBancoDeDados('ALTER TABLE categorias DROP COLUMN teste');
    end;

end;


end.
