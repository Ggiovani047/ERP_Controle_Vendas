unit uTelaHeranca;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.DBCtrls, Vcl.Grids,cUsuarioLogado,
  Vcl.DBGrids, Vcl.StdCtrls, Vcl.Buttons, Vcl.Mask, Vcl.ComCtrls, Vcl.ExtCtrls,
  uDtmConexao, ZAbstractRODataset, RxToolEdit,RxCurrEdit,ZAbstractDataset,
  ZDataset, uEnum, System.UITypes,ZAbstractConnection, ZConnection, ComObj;

type
  TfrmTelaHeranca = class(TForm)
    pgcPrincipal: TPageControl;
    pnlRodape: TPanel;
    tabListagem: TTabSheet;
    tabManutencao: TTabSheet;
    pnlListagemTopo: TPanel;
    mskPesquisar: TMaskEdit;
    btnPesquisar: TBitBtn;
    grdListagem: TDBGrid;
    btnNovo: TBitBtn;
    btnAlterar: TBitBtn;
    btnCancelar: TBitBtn;
    btnGravar: TBitBtn;
    btnApagar: TBitBtn;
    btnFechar: TBitBtn;
    btnNavigator: TDBNavigator;
    QryListagem: TZQuery;
    dtsListagem: TDataSource;
    lblIndice: TLabel;
    procedure FormCreate(Sender: TObject);
    procedure btnFecharClick(Sender: TObject);
    procedure btnNovoClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure btnGravarClick(Sender: TObject);
    procedure btnApagarClick(Sender: TObject);
    procedure btnAlterarClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure grdListagemTitleClick(Column: TColumn);
    procedure mskPesquisarChange(Sender: TObject);
    procedure grdListagemDblClick(Sender: TObject);
    procedure grdListagemKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure btnPesquisarClick(Sender: TObject);
  private
    { Private declarations }

    SelectOriginal:string;
    procedure ControlarBotoes(btnNovo, btnAlterar, btnCancelar,
              btnGravar, btnApagar:TBitBtn; Navegador:TDBNavigator;
              pgcPrincipal: TPageControl; Flag:Boolean);
    procedure ControlarIndiceTab(pgcPrincipal: TPageControl; Indice: Integer);
    function RetornarCampoTraduzido(Campo: String): String;
    procedure ExibirLabelIndice(Campo: string; aLabel: TLabel);
    function ExisteCampoObrigatorio: Boolean;
    procedure desabilitarEditPK;
    procedure LimparEdits;

  public
    { Public declarations }
    EstadoDoCadastro:TEstadoDoCadastro;
    IndiceAtual:string;
    function Apagar:Boolean; virtual;
    function Gravar(EstadoDoCadastro:TEstadoDoCadastro):Boolean; virtual;
    procedure BloqueiaCRTL_DEL_DBGrid(var Key: Word; Shift: TShiftState);

  end;

var
  frmTelaHeranca: TfrmTelaHeranca;

implementation

uses uPrincipal;

{$R *.dfm}
{$REGION 'OBSERVAÇÕES'}
//TAG: 1 - Chave Primaria - Primary Key (PK)
//TAG 2 - Campos obrigratórios

{$ENDREGION}

{$region 'FUNÇÕES E PROCEDURES'}
procedure TfrmTelaHeranca.ControlarBotoes(btnNovo, btnAlterar, btnCancelar,
          btnGravar, btnApagar:TBitBtn; Navegador:TDBNavigator;
          pgcPrincipal: TPageControl; Flag:Boolean);
begin
  btnNovo.Enabled     :=Flag;
  btnApagar.Enabled   :=Flag;
  btnAlterar.Enabled  :=Flag;
  Navegador.Enabled   :=Flag;
  pgcPrincipal.Pages[0].TabVisible := Flag;
  pgcPrincipal.Pages[1].TabVisible := not (Flag);
  btnCancelar.Enabled :=not(Flag);
  btnGravar.Enabled   :=not(Flag);
end;


procedure TfrmTelaHeranca.ControlarIndiceTab(pgcPrincipal: TPageControl; Indice: Integer);
begin
  if (pgcPrincipal.Pages[Indice].TabVisible) then
     pgcPrincipal.TabIndex:=Indice;
end;

function TfrmTelaHeranca.RetornarCampoTraduzido(Campo:String):String;
var i:Integer;
begin
  for I := 0 to QryListagem.Fields.Count-1 do begin
    if lowercase(QryListagem.Fields[i].FieldName)=lowercase(Campo) then begin
       Result:= QryListagem.Fields[i].DisplayLabel;
       Break;
    end;
  end;
end;


procedure TfrmTelaHeranca.ExibirLabelIndice(Campo:string; aLabel:TLabel);
begin
  aLabel.Caption:=RetornarCampoTraduzido(Campo);
end;

function TfrmTelaHeranca.ExisteCampoObrigatorio: Boolean;
var i: Integer;
begin
  Result := False;
  for i := 0 to ComponentCount -1 do begin
    if (Components[i] is TLabeledEdit) then
      begin
        if(TLabeledEdit(Components[i]).Tag = 2) and
          (TLabeledEdit(Components[i]).Text = EmptyStr) then begin
          MessageDlg(TLabeledEdit(Components[i]).Hint +
          ' é um campo obrigatório', mtInformation, [mbOK], 0);
          TLabeledEdit(Components[i]).SetFocus;
          Result := True;
          Break;
        end;

      end
    else if (Components[i] is TDBLookupComboBox) then
      begin
        if(TDBLookupComboBox(Components[i]).Tag = 2) and (TDBLookupComboBox(Components[i]).KeyValue = Null) then
            begin
              MessageDlg(TDBLookupComboBox(Components[i]).Hint + ' é um campo obrigatório', mtInformation, [mbOK], 0);
              TDBLookupComboBox(Components).SetFocus;
              Result := True;
              Break;
            end;
      end
      else if (Components[i] is TCurrencyEdit) then
      begin
        if(TCurrencyEdit(Components[i]).Tag = 2) and
        (TCurrencyEdit(Components[i]).Value <= 0) then
            begin
              MessageDlg(TCurrencyEdit(Components[i]).Hint + ' Inválido(a) ', mtInformation, [mbOK], 0);
              TCurrencyEdit(Components).SetFocus;
              Result := True;
              Break;
            end;
      end;
  end;
end;

  procedure TfrmTelaHeranca.desabilitarEditPK;
  Var i:Integer;
  begin
    for i := 0 to ComponentCount -1 do begin
      if (Components[i] is TLabeledEdit) then begin
        if (TLabeledEdit(Components[i]).Tag = 1) then begin
          TLabeledEdit(Components[i]).Enabled:=False;
          Break;
        end;
      end;
    end;
  end;

   procedure TfrmTelaHeranca.LimparEdits;
  Var i:Integer;
  begin
    for i := 0 to ComponentCount -1 do begin
      if (Components[i] is TLabeledEdit) then
        TLabeledEdit(Components[i]).Text:=EmptyStr
      else if (Components[i] is TEdit) then
        TEdit(Components[i]).Text:=EmptyStr
        else if (Components[i] is TMaskEdit) then
        TMaskEdit(Components[i]).Text:=EmptyStr
      else if (Components[i]is TMemo) then
        TMemo(Components[i]).Text:=EmptyStr
      else if (Components[i]is TDBLookupComboBox) then
        TDBLookupComboBox(Components[i]).KeyValue:=Null
      else if (Components[i]is TCurrencyEdit) then
        TCurrencyEdit(Components[i]).Value:=0
      else if (Components[i]is TDateEdit) then
        TDateEdit(Components[i]).Date:=0;
    end;
  end;

{$endregion}

{$region 'MÉTODOS VIRTUAIS'}
function TfrmTelaHeranca.Apagar: Boolean;
begin
  ShowMessage('DELETADO');
  Result := True;
end;

function TfrmTelaHeranca.Gravar(EstadoDoCadastro:TEstadoDoCadastro):Boolean;
begin
  if (EstadoDoCadastro=ecInserir) then
     showmessage('Inserir')
  else if (EstadoDoCadastro=ecAlterar) then
     showmessage('Alterado');
  Result := True;
end;

{$endregion}

procedure TfrmTelaHeranca.btnNovoClick(Sender: TObject);
begin
  ControlarBotoes(btnNovo, btnAlterar, btnCancelar, btnGravar,
                  btnApagar, btnNavigator, pgcPrincipal,false);
  EstadoDoCadastro:=ecInserir;
  LimparEdits;
end;

procedure TfrmTelaHeranca.btnPesquisarClick(Sender: TObject);
var i:Integer;
    TipoCampo:TFieldType;
    NomeCampo: string;
    WhereOrAnd: string;
    CondicaoSQL:string;
begin
  if mskPesquisar.Text='' then
  Begin
    QryListagem.Close;
    QryListagem.SQL.Clear;
    QryListagem.SQL.Add(SelectOriginal);
    QryListagem.Open;
    Abort;
  End;

  for i:=0 to QryListagem.FieldCount-1 do
  begin
    if QryListagem.Fields[i].FieldName=IndiceAtual then
    begin
      TipoCampo := QryListagem.Fields[i].DataType;
      if QryListagem.Fields[i].Origin<>'' then
      begin
        if Pos('.', QryListagem.Fields[i].Origin) > 0 then
          NomeCampo := QryListagem.Fields[i].Origin
        else
        NomeCampo := QryListagem.Fields[i].Origin+'.'+QryListagem.Fields[i].FieldName
      end
      else
        NomeCampo := QryListagem.Fields[i].FieldName;
      Break;
    end;
  end;

  if Pos('where',LowerCase(SelectOriginal)) > 1 then
  begin
    WhereOrAnd:=' and '
  end
  else
  begin
    WhereOrAnd := 'Where';
  end;

  if (TipoCampo=ftString) or (TipoCampo=ftWideString) then
  begin
     CondicaoSQL:= WhereOrAnd+' '+ NomeCampo + ' LIKE '+QuotedStr('%'+mskPesquisar.Text+'%');
  end
  else if (TipoCampo = ftInteger) or (TipoCampo = ftSmallint) then
  begin
    CondicaoSQL:= WhereOrAnd+' '+NomeCampo+'='+mskPesquisar.Text
  end
  else if (TipoCampo = ftDate) or (TipoCampo = ftDateTime) then
  begin
    CondicaoSQL := WhereOrAnd+' '+NomeCampo + '='+QuotedStr(mskPesquisar.Text)
  end
  else if (TipoCampo = ftFloat) or (TipoCampo = ftCurrency) then
  begin
    CondicaoSQL := WhereOrAnd+' '+NomeCampo + '='+StringReplace(mskPesquisar.Text,',','.',[rfReplaceAll]);
  end;

  QryListagem.Close;
  QryListagem.SQL.Clear;
  QryListagem.SQL.Add(SelectOriginal);
  QryListagem.SQL.Add(CondicaoSQL);

  try
    QryListagem.Open;
  except
  on E: EOleException do begin
    MessageDlg('Não é possivel pesquisar ID por letras ',mtInformation,[mbOK], 0);
    QryListagem.Close;
    QryListagem.SQL.Clear;
    QryListagem.SQL.Add(SelectOriginal);
    QryListagem.Open;
  end;
  on E: Exception do begin
    MessageDlg('Ocorreu um Erro: '+E.Message,mtError,[mbOK], 0);
    QryListagem.Close;
    QryListagem.SQL.Clear;
    QryListagem.SQL.Add(SelectOriginal);
    QryListagem.Open;
  end;



  end;


  mskPesquisar.Text:= EmptyStr;
  mskPesquisar.SetFocus;

end;

procedure TfrmTelaHeranca.btnAlterarClick(Sender: TObject);
begin
  if not TUsuarioLogado.TenhoAcesso(oUsuarioLogado.codigo, Self.Name+'_'+TBitBtn(Sender).Name, dtmPrincipal.ConexaoDB) then
  begin
    MessageDlg('Usuario: '+oUsuarioLogado.nome+', não tem permissão de acesso',mtWarning,[mbOK], 0);
    Abort;
  end;
  ControlarBotoes(btnNovo, btnAlterar, btnCancelar, btnGravar,
                  btnApagar, btnNavigator, pgcPrincipal,false);
  EstadoDoCadastro:=ecAlterar;
end;

procedure TfrmTelaHeranca.btnApagarClick(Sender: TObject);
begin
  if not TUsuarioLogado.TenhoAcesso(oUsuarioLogado.codigo, Self.Name+'_'+TBitBtn(Sender).Name, dtmPrincipal.ConexaoDB) then
  begin
    MessageDlg('Usuario: '+oUsuarioLogado.nome+', não tem permissão de acesso',mtWarning,[mbOK], 0);
    Abort;
  end;

  try
    if (Apagar) then begin
      ControlarBotoes(btnNovo, btnAlterar, btnCancelar, btnGravar,
                      btnApagar, btnNavigator, pgcPrincipal,true);
      ControlarIndiceTab(pgcPrincipal, 0);
      LimparEdits;
      QryListagem.Refresh;
    end;
  finally
    EstadoDoCadastro:=ecNenhum;
  end;
end;

procedure TfrmTelaHeranca.btnCancelarClick(Sender: TObject);
begin
  ControlarBotoes(btnNovo, btnAlterar, btnCancelar, btnGravar,
                  btnApagar, btnNavigator, pgcPrincipal,true);
  ControlarIndiceTab(pgcPrincipal, 0);
  EstadoDoCadastro:=ecNenhum;
  LimparEdits;
end;

procedure TfrmTelaHeranca.btnFecharClick(Sender: TObject);
begin
  Close;
end;

procedure TfrmTelaHeranca.btnGravarClick(Sender: TObject);
begin
  if not TUsuarioLogado.TenhoAcesso(oUsuarioLogado.codigo, Self.Name+'_'+TBitBtn(Sender).Name, dtmPrincipal.ConexaoDB) then
  begin
    MessageDlg('Usuario: '+oUsuarioLogado.nome+', não tem permissão de acesso',mtWarning,[mbOK], 0);
    Abort;
  end;

  if (ExisteCampoObrigatorio) then
    abort;

  Try
    if Gravar(EstadoDoCadastro) then begin
      ControlarBotoes(btnNovo, btnAlterar, btnCancelar, btnGravar,
                      btnApagar, btnNavigator, pgcPrincipal,true);
      ControlarIndiceTab(pgcPrincipal, 0);
      EstadoDoCadastro:=ecNenhum;
      LimparEdits;
      Qrylistagem.Refresh;
    end
    else begin
      MessageDlg('Erro na Gravação',mtError,[mbOK],0);
    end
    finally
  End;
end;

procedure TfrmTelaHeranca.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  QryListagem.Close;
end;

procedure TfrmTelaHeranca.FormCreate(Sender: TObject);
begin
  indiceatual:= grdListagem.Columns[1].FieldName;
  QryListagem.Connection:=dtmPrincipal.ConexaoDB;
  dtsListagem.DataSet:=QryListagem;
  grdListagem.DataSource:=dtsListagem;
  grdListagem.Options:=[dgTitles,dgIndicator,dgColumnResize,
                        dgColLines,dgRowLines,dgTabs,dgRowSelect,
                        dgAlwaysShowSelection,dgCancelOnExit,
                        dgTitleClick,dgTitleHotTrack];
end;


procedure TfrmTelaHeranca.FormShow(Sender: TObject);
begin
  if (QryListagem.SQL.Text<>EmptyStr) then begin
    QryListagem.IndexFieldNames:=IndiceAtual;
    ExibirLabelIndice(IndiceAtual, lblIndice);
    SelectOriginal:=QryListagem.SQL.Text;
    QryListagem.Open;
  end;
  desabilitarEditPK;
  if EstadoDoForm = efConsulta then begin
    ControlarIndiceTab(pgcPrincipal, 0);
    ControlarBotoes(btnNovo, btnAlterar, btnCancelar, btnGravar,
                    btnApagar, btnNavigator, pgcPrincipal,true);
    btnCancelar.Enabled := True;
  end
  else begin
    ControlarIndiceTab(pgcPrincipal, 1);
    ControlarBotoes(btnNovo, btnAlterar, btnCancelar, btnGravar,
                  btnApagar, btnNavigator, pgcPrincipal,False);
    btnCancelar.Enabled := False;
  end;

end;

procedure TfrmTelaHeranca.grdListagemDblClick(Sender: TObject);
begin
   btnAlterar.Click;
end;

procedure TfrmTelaHeranca.grdListagemKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  BloqueiaCRTL_DEL_DBGrid(Key, Shift);
end;

procedure TfrmTelaHeranca.grdListagemTitleClick(Column: TColumn);
begin
  IndiceAtual := Column.FieldName;
  QryListagem.IndexFieldNames:=IndiceAtual;
  ExibirLabelIndice(IndiceAtual, lblIndice);
end;

procedure TfrmTelaHeranca.mskPesquisarChange(Sender: TObject);
begin
  QryListagem.Locate(IndiceAtual, TMaskEdit(Sender).Text, [loPartialKey,loCaseInsensitive]);
end;

procedure TfrmTelaHeranca.BloqueiaCRTL_DEL_DBGrid(var Key:Word; Shift: TShiftState);
begin
  if (Shift = [ssCtrl]) and (Key = 46) then
    Key := 0;
end;



end.
